"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DriverRoutes = void 0;
const express_1 = require("express");
const checkAuth_1 = require("../../middlewares/checkAuth");
const user_interface_1 = require("../user/user.interface");
const driver_controller_1 = require("./driver.controller");
const driver_validation_1 = require("./driver.validation");
const validateRequest_1 = require("../../middlewares/validateRequest");
const router = (0, express_1.Router)();
router.post("/apply-driver", (0, checkAuth_1.checkAuth)(user_interface_1.Role.RIDER), driver_controller_1.DriverController.applyToBeDriver, (0, validateRequest_1.validateRequest)(driver_validation_1.createDriverZodSchema));
router.get("/rides-available", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), driver_controller_1.DriverController.getAvailableRides);
router.patch("/rides/:id/accept", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), driver_controller_1.DriverController.acceptRide);
router.patch("/rides/:id/reject", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), driver_controller_1.DriverController.rejectRide);
router.patch("/rides/:id/status", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), driver_controller_1.DriverController.updateRideStatus);
router.get("/earning-history", (0, checkAuth_1.checkAuth)(user_interface_1.Role.DRIVER), driver_controller_1.DriverController.getRideHistory);
exports.DriverRoutes = router;
